// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace OGB.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240426103347_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Model.ContactStudentInfo1A", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo1A");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo1B", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo1B");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo1C", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo1C");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo2A", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo2A");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo2B", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo2B");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo2C", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo2C");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo3A", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo3A");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo3B", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo3B");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo3C", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("ContactStudentInfo3C");
                });

            modelBuilder.Entity("Domain.Model.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearsOfTeaching")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("Domain.Model.TeacherAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherRef")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeacherRef")
                        .IsUnique();

                    b.ToTable("TeacherAddress");
                });

            modelBuilder.Entity("Domain.Model.TeacherContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeacherRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherRef")
                        .IsUnique();

                    b.ToTable("TeacherContactInfo");
                });

            modelBuilder.Entity("Domain.Model._1ABiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1ABiology");
                });

            modelBuilder.Entity("Domain.Model._1AChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1AChemistry");
                });

            modelBuilder.Entity("Domain.Model._1AEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1AEnglish");
                });

            modelBuilder.Entity("Domain.Model._1AGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1AGeography");
                });

            modelBuilder.Entity("Domain.Model._1AGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1AGerman");
                });

            modelBuilder.Entity("Domain.Model._1AGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1AHistory");
                });

            modelBuilder.Entity("Domain.Model._1AMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1AMath");
                });

            modelBuilder.Entity("Domain.Model._1AStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_1AStudents");
                });

            modelBuilder.Entity("Domain.Model._1BBiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BBiology");
                });

            modelBuilder.Entity("Domain.Model._1BChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BChemistry");
                });

            modelBuilder.Entity("Domain.Model._1BEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BEnglish");
                });

            modelBuilder.Entity("Domain.Model._1BGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BGeography");
                });

            modelBuilder.Entity("Domain.Model._1BGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BGerman");
                });

            modelBuilder.Entity("Domain.Model._1BGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BHistory");
                });

            modelBuilder.Entity("Domain.Model._1BMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1BMath");
                });

            modelBuilder.Entity("Domain.Model._1BStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_1BStudents");
                });

            modelBuilder.Entity("Domain.Model._1CBiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CBiology");
                });

            modelBuilder.Entity("Domain.Model._1CChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CChemistry");
                });

            modelBuilder.Entity("Domain.Model._1CEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CEnglish");
                });

            modelBuilder.Entity("Domain.Model._1CGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CGeography");
                });

            modelBuilder.Entity("Domain.Model._1CGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CGerman");
                });

            modelBuilder.Entity("Domain.Model._1CGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CHistory");
                });

            modelBuilder.Entity("Domain.Model._1CMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_1CMath");
                });

            modelBuilder.Entity("Domain.Model._1CStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_1CStudents");
                });

            modelBuilder.Entity("Domain.Model._2ABiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2ABiology");
                });

            modelBuilder.Entity("Domain.Model._2AChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2AChemistry");
                });

            modelBuilder.Entity("Domain.Model._2AEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2AEnglish");
                });

            modelBuilder.Entity("Domain.Model._2AGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2AGeography");
                });

            modelBuilder.Entity("Domain.Model._2AGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2AGerman");
                });

            modelBuilder.Entity("Domain.Model._2AGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2AHistory");
                });

            modelBuilder.Entity("Domain.Model._2AMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2AMath");
                });

            modelBuilder.Entity("Domain.Model._2AStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_2AStudents");
                });

            modelBuilder.Entity("Domain.Model._2BBiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BBiology");
                });

            modelBuilder.Entity("Domain.Model._2BChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BChemistry");
                });

            modelBuilder.Entity("Domain.Model._2BEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BEnglish");
                });

            modelBuilder.Entity("Domain.Model._2BGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BGeography");
                });

            modelBuilder.Entity("Domain.Model._2BGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BGerman");
                });

            modelBuilder.Entity("Domain.Model._2BGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BHistory");
                });

            modelBuilder.Entity("Domain.Model._2BMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2BMath");
                });

            modelBuilder.Entity("Domain.Model._2BStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_2BStudents");
                });

            modelBuilder.Entity("Domain.Model._2CBiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CBiology");
                });

            modelBuilder.Entity("Domain.Model._2CChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CChemistry");
                });

            modelBuilder.Entity("Domain.Model._2CEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CEnglish");
                });

            modelBuilder.Entity("Domain.Model._2CGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CGeography");
                });

            modelBuilder.Entity("Domain.Model._2CGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CGerman");
                });

            modelBuilder.Entity("Domain.Model._2CGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CHistory");
                });

            modelBuilder.Entity("Domain.Model._2CMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_2CMath");
                });

            modelBuilder.Entity("Domain.Model._2CStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_2CStudents");
                });

            modelBuilder.Entity("Domain.Model._3ABiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3ABiology");
                });

            modelBuilder.Entity("Domain.Model._3AChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3AChemistry");
                });

            modelBuilder.Entity("Domain.Model._3AEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3AEnglish");
                });

            modelBuilder.Entity("Domain.Model._3AGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3AGeography");
                });

            modelBuilder.Entity("Domain.Model._3AGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3AGerman");
                });

            modelBuilder.Entity("Domain.Model._3AGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3AHistory");
                });

            modelBuilder.Entity("Domain.Model._3AMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3AMath");
                });

            modelBuilder.Entity("Domain.Model._3AStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_3AStudents");
                });

            modelBuilder.Entity("Domain.Model._3BBiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BBiology");
                });

            modelBuilder.Entity("Domain.Model._3BChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BChemistry");
                });

            modelBuilder.Entity("Domain.Model._3BEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BEnglish");
                });

            modelBuilder.Entity("Domain.Model._3BGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BGeography");
                });

            modelBuilder.Entity("Domain.Model._3BGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BGerman");
                });

            modelBuilder.Entity("Domain.Model._3BGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BHistory");
                });

            modelBuilder.Entity("Domain.Model._3BMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3BMath");
                });

            modelBuilder.Entity("Domain.Model._3BStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_3BStudents");
                });

            modelBuilder.Entity("Domain.Model._3CBiology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CBiology");
                });

            modelBuilder.Entity("Domain.Model._3CChemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CChemistry");
                });

            modelBuilder.Entity("Domain.Model._3CEnglish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CEnglish");
                });

            modelBuilder.Entity("Domain.Model._3CGeography", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CGeography");
                });

            modelBuilder.Entity("Domain.Model._3CGerman", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CGerman");
                });

            modelBuilder.Entity("Domain.Model._3CGrades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ChemistryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("EnglishAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GeographyAvarage")
                        .HasColumnType("float");

                    b.Property<double>("GermanAvarage")
                        .HasColumnType("float");

                    b.Property<double>("HistoryAvarage")
                        .HasColumnType("float");

                    b.Property<double>("MathAvarage")
                        .HasColumnType("float");

                    b.Property<int>("StudentRef")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentRef")
                        .IsUnique();

                    b.ToTable("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CHistory");
                });

            modelBuilder.Entity("Domain.Model._3CMath", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GradesRef")
                        .HasColumnType("int");

                    b.Property<double>("HomeworkAvarage")
                        .HasColumnType("float");

                    b.Property<double>("ShortQuizAvarage")
                        .HasColumnType("float");

                    b.Property<double>("TestAvarage")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("GradesRef")
                        .IsUnique();

                    b.ToTable("_3CMath");
                });

            modelBuilder.Entity("Domain.Model._3CStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("_3CStudents");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo1A", b =>
                {
                    b.HasOne("Domain.Model._1AStudent", "_1AStudent")
                        .WithOne("ContactStudentInfo1A")
                        .HasForeignKey("Domain.Model.ContactStudentInfo1A", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo1B", b =>
                {
                    b.HasOne("Domain.Model._1BStudent", "_1BStudent")
                        .WithOne("ContactStudentInfo1B")
                        .HasForeignKey("Domain.Model.ContactStudentInfo1B", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo1C", b =>
                {
                    b.HasOne("Domain.Model._1CStudent", "_1CStudent")
                        .WithOne("ContactStudentInfo1C")
                        .HasForeignKey("Domain.Model.ContactStudentInfo1C", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo2A", b =>
                {
                    b.HasOne("Domain.Model._2AStudent", "_2AStudent")
                        .WithOne("ContactStudentInfo2A")
                        .HasForeignKey("Domain.Model.ContactStudentInfo2A", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo2B", b =>
                {
                    b.HasOne("Domain.Model._2BStudent", "_2BStudent")
                        .WithOne("ContactStudentInfo2B")
                        .HasForeignKey("Domain.Model.ContactStudentInfo2B", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo2C", b =>
                {
                    b.HasOne("Domain.Model._2CStudent", "_2CStudent")
                        .WithOne("ContactStudentInfo2C")
                        .HasForeignKey("Domain.Model.ContactStudentInfo2C", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo3A", b =>
                {
                    b.HasOne("Domain.Model._3AStudent", "_3AStudent")
                        .WithOne("ContactStudentInfo3A")
                        .HasForeignKey("Domain.Model.ContactStudentInfo3A", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo3B", b =>
                {
                    b.HasOne("Domain.Model._3BStudent", "_3BStudent")
                        .WithOne("ContactStudentInfo3B")
                        .HasForeignKey("Domain.Model.ContactStudentInfo3B", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BStudent");
                });

            modelBuilder.Entity("Domain.Model.ContactStudentInfo3C", b =>
                {
                    b.HasOne("Domain.Model._3CStudent", "_3CStudent")
                        .WithOne("ContactStudentInfo3C")
                        .HasForeignKey("Domain.Model.ContactStudentInfo3C", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CStudent");
                });

            modelBuilder.Entity("Domain.Model.TeacherAddress", b =>
                {
                    b.HasOne("Domain.Model.Teacher", "Teacher")
                        .WithOne("TeacherAddress")
                        .HasForeignKey("Domain.Model.TeacherAddress", "TeacherRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Model.TeacherContactInfo", b =>
                {
                    b.HasOne("Domain.Model.Teacher", "Teacher")
                        .WithOne("TeacherContactInfo")
                        .HasForeignKey("Domain.Model.TeacherContactInfo", "TeacherRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Domain.Model._1ABiology", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1ABiology")
                        .HasForeignKey("Domain.Model._1ABiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AChemistry", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1AChemistry")
                        .HasForeignKey("Domain.Model._1AChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AEnglish", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1AEnglish")
                        .HasForeignKey("Domain.Model._1AEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AGeography", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1AGeography")
                        .HasForeignKey("Domain.Model._1AGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AGerman", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1AGerman")
                        .HasForeignKey("Domain.Model._1AGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AGrades", b =>
                {
                    b.HasOne("Domain.Model._1AStudent", "_1AStudent")
                        .WithOne("_1AGrades")
                        .HasForeignKey("Domain.Model._1AGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AStudent");
                });

            modelBuilder.Entity("Domain.Model._1AHistory", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1AHistory")
                        .HasForeignKey("Domain.Model._1AHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1AMath", b =>
                {
                    b.HasOne("Domain.Model._1AGrades", "_1AGrades")
                        .WithOne("_1AMath")
                        .HasForeignKey("Domain.Model._1AMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1AGrades");
                });

            modelBuilder.Entity("Domain.Model._1BBiology", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BBiology")
                        .HasForeignKey("Domain.Model._1BBiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BChemistry", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BChemistry")
                        .HasForeignKey("Domain.Model._1BChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BEnglish", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BEnglish")
                        .HasForeignKey("Domain.Model._1BEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BGeography", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BGeography")
                        .HasForeignKey("Domain.Model._1BGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BGerman", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BGerman")
                        .HasForeignKey("Domain.Model._1BGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BGrades", b =>
                {
                    b.HasOne("Domain.Model._1BStudent", "_1BStudent")
                        .WithOne("_1BGrades")
                        .HasForeignKey("Domain.Model._1BGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BStudent");
                });

            modelBuilder.Entity("Domain.Model._1BHistory", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BHistory")
                        .HasForeignKey("Domain.Model._1BHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1BMath", b =>
                {
                    b.HasOne("Domain.Model._1BGrades", "_1BGrades")
                        .WithOne("_1BMath")
                        .HasForeignKey("Domain.Model._1BMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1BGrades");
                });

            modelBuilder.Entity("Domain.Model._1CBiology", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CBiology")
                        .HasForeignKey("Domain.Model._1CBiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CChemistry", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CChemistry")
                        .HasForeignKey("Domain.Model._1CChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CEnglish", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CEnglish")
                        .HasForeignKey("Domain.Model._1CEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CGeography", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CGeography")
                        .HasForeignKey("Domain.Model._1CGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CGerman", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CGerman")
                        .HasForeignKey("Domain.Model._1CGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CGrades", b =>
                {
                    b.HasOne("Domain.Model._1CStudent", "_1CStudent")
                        .WithOne("_1CGrades")
                        .HasForeignKey("Domain.Model._1CGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CStudent");
                });

            modelBuilder.Entity("Domain.Model._1CHistory", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CHistory")
                        .HasForeignKey("Domain.Model._1CHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._1CMath", b =>
                {
                    b.HasOne("Domain.Model._1CGrades", "_1CGrades")
                        .WithOne("_1CMath")
                        .HasForeignKey("Domain.Model._1CMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_1CGrades");
                });

            modelBuilder.Entity("Domain.Model._2ABiology", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2ABiology")
                        .HasForeignKey("Domain.Model._2ABiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AChemistry", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2AChemistry")
                        .HasForeignKey("Domain.Model._2AChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AEnglish", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2AEnglish")
                        .HasForeignKey("Domain.Model._2AEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AGeography", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2AGeography")
                        .HasForeignKey("Domain.Model._2AGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AGerman", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2AGerman")
                        .HasForeignKey("Domain.Model._2AGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AGrades", b =>
                {
                    b.HasOne("Domain.Model._2AStudent", "_2AStudent")
                        .WithOne("_2AGrades")
                        .HasForeignKey("Domain.Model._2AGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AStudent");
                });

            modelBuilder.Entity("Domain.Model._2AHistory", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2AHistory")
                        .HasForeignKey("Domain.Model._2AHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2AMath", b =>
                {
                    b.HasOne("Domain.Model._2AGrades", "_2AGrades")
                        .WithOne("_2AMath")
                        .HasForeignKey("Domain.Model._2AMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2AGrades");
                });

            modelBuilder.Entity("Domain.Model._2BBiology", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BBiology")
                        .HasForeignKey("Domain.Model._2BBiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BChemistry", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BChemistry")
                        .HasForeignKey("Domain.Model._2BChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BEnglish", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BEnglish")
                        .HasForeignKey("Domain.Model._2BEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BGeography", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BGeography")
                        .HasForeignKey("Domain.Model._2BGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BGerman", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BGerman")
                        .HasForeignKey("Domain.Model._2BGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BGrades", b =>
                {
                    b.HasOne("Domain.Model._2BStudent", "_2BStudent")
                        .WithOne("_2BGrades")
                        .HasForeignKey("Domain.Model._2BGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BStudent");
                });

            modelBuilder.Entity("Domain.Model._2BHistory", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BHistory")
                        .HasForeignKey("Domain.Model._2BHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2BMath", b =>
                {
                    b.HasOne("Domain.Model._2BGrades", "_2BGrades")
                        .WithOne("_2BMath")
                        .HasForeignKey("Domain.Model._2BMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2BGrades");
                });

            modelBuilder.Entity("Domain.Model._2CBiology", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CBiology")
                        .HasForeignKey("Domain.Model._2CBiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CChemistry", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CChemistry")
                        .HasForeignKey("Domain.Model._2CChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CEnglish", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CEnglish")
                        .HasForeignKey("Domain.Model._2CEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CGeography", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CGeography")
                        .HasForeignKey("Domain.Model._2CGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CGerman", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CGerman")
                        .HasForeignKey("Domain.Model._2CGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CGrades", b =>
                {
                    b.HasOne("Domain.Model._2CStudent", "_2CStudent")
                        .WithOne("_2CGrades")
                        .HasForeignKey("Domain.Model._2CGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CStudent");
                });

            modelBuilder.Entity("Domain.Model._2CHistory", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CHistory")
                        .HasForeignKey("Domain.Model._2CHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._2CMath", b =>
                {
                    b.HasOne("Domain.Model._2CGrades", "_2CGrades")
                        .WithOne("_2CMath")
                        .HasForeignKey("Domain.Model._2CMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_2CGrades");
                });

            modelBuilder.Entity("Domain.Model._3ABiology", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3ABiology")
                        .HasForeignKey("Domain.Model._3ABiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AChemistry", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3AChemistry")
                        .HasForeignKey("Domain.Model._3AChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AEnglish", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3AEnglish")
                        .HasForeignKey("Domain.Model._3AEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AGeography", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3AGeography")
                        .HasForeignKey("Domain.Model._3AGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AGerman", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3AGerman")
                        .HasForeignKey("Domain.Model._3AGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AGrades", b =>
                {
                    b.HasOne("Domain.Model._3AStudent", "_3AStudent")
                        .WithOne("_3AGrades")
                        .HasForeignKey("Domain.Model._3AGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AStudent");
                });

            modelBuilder.Entity("Domain.Model._3AHistory", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3AHistory")
                        .HasForeignKey("Domain.Model._3AHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3AMath", b =>
                {
                    b.HasOne("Domain.Model._3AGrades", "_3AGrades")
                        .WithOne("_3AMath")
                        .HasForeignKey("Domain.Model._3AMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3AGrades");
                });

            modelBuilder.Entity("Domain.Model._3BBiology", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BBiology")
                        .HasForeignKey("Domain.Model._3BBiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BChemistry", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BChemistry")
                        .HasForeignKey("Domain.Model._3BChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BEnglish", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BEnglish")
                        .HasForeignKey("Domain.Model._3BEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BGeography", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BGeography")
                        .HasForeignKey("Domain.Model._3BGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BGerman", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BGerman")
                        .HasForeignKey("Domain.Model._3BGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BGrades", b =>
                {
                    b.HasOne("Domain.Model._3BStudent", "_3BStudent")
                        .WithOne("_3BGrades")
                        .HasForeignKey("Domain.Model._3BGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BStudent");
                });

            modelBuilder.Entity("Domain.Model._3BHistory", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BHistory")
                        .HasForeignKey("Domain.Model._3BHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3BMath", b =>
                {
                    b.HasOne("Domain.Model._3BGrades", "_3BGrades")
                        .WithOne("_3BMath")
                        .HasForeignKey("Domain.Model._3BMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3BGrades");
                });

            modelBuilder.Entity("Domain.Model._3CBiology", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CBiology")
                        .HasForeignKey("Domain.Model._3CBiology", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CChemistry", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CChemistry")
                        .HasForeignKey("Domain.Model._3CChemistry", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CEnglish", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CEnglish")
                        .HasForeignKey("Domain.Model._3CEnglish", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CGeography", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CGeography")
                        .HasForeignKey("Domain.Model._3CGeography", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CGerman", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CGerman")
                        .HasForeignKey("Domain.Model._3CGerman", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CGrades", b =>
                {
                    b.HasOne("Domain.Model._3CStudent", "_3CStudent")
                        .WithOne("_3CGrades")
                        .HasForeignKey("Domain.Model._3CGrades", "StudentRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CStudent");
                });

            modelBuilder.Entity("Domain.Model._3CHistory", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CHistory")
                        .HasForeignKey("Domain.Model._3CHistory", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Domain.Model._3CMath", b =>
                {
                    b.HasOne("Domain.Model._3CGrades", "_3CGrades")
                        .WithOne("_3CMath")
                        .HasForeignKey("Domain.Model._3CMath", "GradesRef")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("_3CGrades");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model.Teacher", b =>
                {
                    b.Navigation("TeacherAddress")
                        .IsRequired();

                    b.Navigation("TeacherContactInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._1AGrades", b =>
                {
                    b.Navigation("_1ABiology")
                        .IsRequired();

                    b.Navigation("_1AChemistry")
                        .IsRequired();

                    b.Navigation("_1AEnglish")
                        .IsRequired();

                    b.Navigation("_1AGeography")
                        .IsRequired();

                    b.Navigation("_1AGerman")
                        .IsRequired();

                    b.Navigation("_1AHistory")
                        .IsRequired();

                    b.Navigation("_1AMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._1AStudent", b =>
                {
                    b.Navigation("ContactStudentInfo1A")
                        .IsRequired();

                    b.Navigation("_1AGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._1BGrades", b =>
                {
                    b.Navigation("_1BBiology")
                        .IsRequired();

                    b.Navigation("_1BChemistry")
                        .IsRequired();

                    b.Navigation("_1BEnglish")
                        .IsRequired();

                    b.Navigation("_1BGeography")
                        .IsRequired();

                    b.Navigation("_1BGerman")
                        .IsRequired();

                    b.Navigation("_1BHistory")
                        .IsRequired();

                    b.Navigation("_1BMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._1BStudent", b =>
                {
                    b.Navigation("ContactStudentInfo1B")
                        .IsRequired();

                    b.Navigation("_1BGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._1CGrades", b =>
                {
                    b.Navigation("_1CBiology")
                        .IsRequired();

                    b.Navigation("_1CChemistry")
                        .IsRequired();

                    b.Navigation("_1CEnglish")
                        .IsRequired();

                    b.Navigation("_1CGeography")
                        .IsRequired();

                    b.Navigation("_1CGerman")
                        .IsRequired();

                    b.Navigation("_1CHistory")
                        .IsRequired();

                    b.Navigation("_1CMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._1CStudent", b =>
                {
                    b.Navigation("ContactStudentInfo1C")
                        .IsRequired();

                    b.Navigation("_1CGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._2AGrades", b =>
                {
                    b.Navigation("_2ABiology")
                        .IsRequired();

                    b.Navigation("_2AChemistry")
                        .IsRequired();

                    b.Navigation("_2AEnglish")
                        .IsRequired();

                    b.Navigation("_2AGeography")
                        .IsRequired();

                    b.Navigation("_2AGerman")
                        .IsRequired();

                    b.Navigation("_2AHistory")
                        .IsRequired();

                    b.Navigation("_2AMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._2AStudent", b =>
                {
                    b.Navigation("ContactStudentInfo2A")
                        .IsRequired();

                    b.Navigation("_2AGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._2BGrades", b =>
                {
                    b.Navigation("_2BBiology")
                        .IsRequired();

                    b.Navigation("_2BChemistry")
                        .IsRequired();

                    b.Navigation("_2BEnglish")
                        .IsRequired();

                    b.Navigation("_2BGeography")
                        .IsRequired();

                    b.Navigation("_2BGerman")
                        .IsRequired();

                    b.Navigation("_2BHistory")
                        .IsRequired();

                    b.Navigation("_2BMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._2BStudent", b =>
                {
                    b.Navigation("ContactStudentInfo2B")
                        .IsRequired();

                    b.Navigation("_2BGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._2CGrades", b =>
                {
                    b.Navigation("_2CBiology")
                        .IsRequired();

                    b.Navigation("_2CChemistry")
                        .IsRequired();

                    b.Navigation("_2CEnglish")
                        .IsRequired();

                    b.Navigation("_2CGeography")
                        .IsRequired();

                    b.Navigation("_2CGerman")
                        .IsRequired();

                    b.Navigation("_2CHistory")
                        .IsRequired();

                    b.Navigation("_2CMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._2CStudent", b =>
                {
                    b.Navigation("ContactStudentInfo2C")
                        .IsRequired();

                    b.Navigation("_2CGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._3AGrades", b =>
                {
                    b.Navigation("_3ABiology")
                        .IsRequired();

                    b.Navigation("_3AChemistry")
                        .IsRequired();

                    b.Navigation("_3AEnglish")
                        .IsRequired();

                    b.Navigation("_3AGeography")
                        .IsRequired();

                    b.Navigation("_3AGerman")
                        .IsRequired();

                    b.Navigation("_3AHistory")
                        .IsRequired();

                    b.Navigation("_3AMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._3AStudent", b =>
                {
                    b.Navigation("ContactStudentInfo3A")
                        .IsRequired();

                    b.Navigation("_3AGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._3BGrades", b =>
                {
                    b.Navigation("_3BBiology")
                        .IsRequired();

                    b.Navigation("_3BChemistry")
                        .IsRequired();

                    b.Navigation("_3BEnglish")
                        .IsRequired();

                    b.Navigation("_3BGeography")
                        .IsRequired();

                    b.Navigation("_3BGerman")
                        .IsRequired();

                    b.Navigation("_3BHistory")
                        .IsRequired();

                    b.Navigation("_3BMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._3BStudent", b =>
                {
                    b.Navigation("ContactStudentInfo3B")
                        .IsRequired();

                    b.Navigation("_3BGrades")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._3CGrades", b =>
                {
                    b.Navigation("_3CBiology")
                        .IsRequired();

                    b.Navigation("_3CChemistry")
                        .IsRequired();

                    b.Navigation("_3CEnglish")
                        .IsRequired();

                    b.Navigation("_3CGeography")
                        .IsRequired();

                    b.Navigation("_3CGerman")
                        .IsRequired();

                    b.Navigation("_3CHistory")
                        .IsRequired();

                    b.Navigation("_3CMath")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Model._3CStudent", b =>
                {
                    b.Navigation("ContactStudentInfo3C")
                        .IsRequired();

                    b.Navigation("_3CGrades")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
